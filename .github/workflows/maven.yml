# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Backend CI (Spring)

# This workflow is triggered when there are push changes to the Java source code
on:
  push:
    paths:
    - '**.java'

# Set the default directory to the back-end code at the backend folder
defaults:
  run:
    working-directory: src/backend/blockchainIOT

# Workflow Jobs
jobs:
  # Boolean flag output of file changes under the prototypeIOT folder
  DirectoryCheck:
    name: Check files
    outputs:
      executeCI: ${{ steps.javaChanges.outputs.executeCI }}
    # Test on latest Ubuntu container
    runs-on: ubuntu-latest
    # Perform the following
    steps:
    # Checkout the git
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    # Change if there any changes to the blockchainIOT folder
    - name: Check for changes under blockchainIOT
      id: javaChanges
      run: |
        git diff --name-only HEAD^ HEAD > files.txt
        while IFS= read -r file
        do
          echo $file
          if [[ $file != src/backend/blockchainIOT* ]]; then
            echo "::set-output name=executeCI::false"
            break
          else
            echo "::set-output name=executeCI::true"
          fi
        done < files.txt
  # JavaCI Workflow
  JavaCIWorkflow:
    name: JavaCI testing
    needs: check
    if: needs.check.outputs.executeCI == 'true'
    runs-on: ubuntu-latest
    steps:
      # Setup the JDK dev environment with JDK 17
      - name: Set up JDK 1.17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      # Cache the Maven .m2 repo to make testing faster
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Test the application using maven
      - name: Run JUnit testing with Maven
        run: mvn -B test --file pom.xml
      # Build the application package using maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml